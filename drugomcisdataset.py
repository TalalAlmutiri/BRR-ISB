# -*- coding: utf-8 -*-
"""DrugOmcisDataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ApcIR66KANIixS6Vk1aEIcESNeCfV88
"""

import os
import torch
import numpy as np
from torch_geometric.data import InMemoryDataset, download_url,Dataset, Data, DataLoader
from preprocessing import *

# customized from GraphDRP
class DrugOmcisDataset(InMemoryDataset):
    def __init__(self, root='/data',dataset='CCLE',
             x_omics=None,x_drug=None,y=None,
                 transform=None, pre_transform=None, pre_filter=None):

        super().__init__(root, transform, pre_transform, pre_filter)
        self.dataset = dataset
        self.process(x_omics, x_drug, y)
        self.data, self.slices = torch.load(self.processed_paths[0])

    @property
    def raw_file_names(self):
        pass

    @property
    def processed_file_names(self):
        return [self.dataset + '.pt']

    def _download(self):
        pass

    def _process(self):
        if not os.path.exists(self.processed_dir):
            os.makedirs(self.processed_dir)


    def process(self,x_omics, x_drug, y):
       # Read data into huge `Data` list.
        data_list = []
        for i, smile in enumerate(x_drug):
            num_of_atoms, node_features,edge_attribute, edge_index = get_drug_representation(smile)
            # creating dataset
            graph_dataset = Data(x=torch.Tensor(node_features),
                                edge_index=torch.LongTensor(edge_index).transpose(1, 0),
                                edge_attr=torch.tensor(edge_attribute,dtype=torch.float),
                                y=torch.FloatTensor([y[i]]),
                                omics=torch.FloatTensor([x_omics[i]]),
                                num_of_atoms = torch.LongTensor([num_of_atoms]))

            data_list.append(graph_dataset)
        if self.pre_filter is not None:
            data_list = [data for data in data_list if self.pre_filter(data)]

        if self.pre_transform is not None:
            data_list = [self.pre_transform(data) for data in data_list]

        data, slices = self.collate(data_list)
        torch.save((data, slices), self.processed_paths[0])