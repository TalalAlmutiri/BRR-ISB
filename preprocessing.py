# -*- coding: utf-8 -*-
"""preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1odOjiwRn9Xz7yadtxLnWTrlWyus3SSZr
"""

import os
import numpy as np
import pandas as pd
import networkx as nx
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

from rdkit.Chem import MolFromSmiles
import deepchem as dc
from rdkit import Chem

ic50_path = '/content/datasets/CCLE_logic50_New.csv'
rna_path = '/content/datasets/CCLE_rna.csv'
snv_path = '/content/datasets/CCLE_mut.csv'
cnv_path = '/content/datasets/CCLE_cnv.csv'
drug_path = '/content/datasets/SMILES_DrugsChemicalStructure.csv'

def loadData(path):
  df = pd.read_csv(path)
  return df

def resetIndex(dfSource, title):
  dfSource.reset_index(inplace=True)
  dfSource= dfSource.rename(columns={"index": title})
  return dfSource

def scale_data(dfSource):
  standard_scaler = MinMaxScaler()
  scaled = pd.DataFrame(standard_scaler.fit_transform(dfSource))

  return scaled

def get_IC50_data():
  df_IC50 = loadData(ic50_path)
  df_IC50.sort_values('Unnamed: 0')
  df_IC50.rename(columns={"Unnamed: 0": "Cell_Lines","AZD6244.1": "AZD6244"},inplace=True)

  df_IC50_Table= df_IC50.copy()
  df_IC50_Table = df_IC50_Table.stack().reset_index()
  df_IC50_Table.columns=['Cell_Lines', 'Drug_Name', 'Response']
  #remove some rows with value Unnamed: 0 as a drug name
  df_IC50_Table = df_IC50_Table[df_IC50_Table.Drug_Name != 'Cell_Lines']

  df_IC50_Table['Cell_Lines'].replace([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362],['42-MG-BA', '5637', '639-V', '697', '769-P', '8-MG-BA', '8505C', 'A172', 'A2058', 'A2780', 'A549', 'ACHN', 'AMO-1', 'AsPC-1', 'AU565', 'BFTC-909', 'BL-41', 'BL-70', 'BT-20', 'BT-474', 'BT-549', 'BxPC-3', 'C2BBe1', 'C32', 'C3A', 'Caki-2', 'CAL-12T', 'CAL-85-1', 'Calu-1', 'Calu-3', 'Calu-6', 'CAMA-1', 'Capan-2', 'CAS-1', 'CCK-81', 'CHL-1', 'CHP-212', 'CMK-86', 'COLO-678', 'COLO-679', 'COR-L23', 'COV318', 'COV504', 'Daoy', 'DBTRG-05MG', 'DEL', 'DK-MG', 'DOHH-2', 'DV-90', 'EB2', 'EBC-1', 'EFE-184', 'EFM-19', 'EFO-21', 'EFO-27', 'EM-2', 'EN', 'ES-2', 'ESS-1', 'F-36P', 'FU-OV-1', 'FU97', 'G-361', 'G-401', 'G-402', 'GAMG', 'GCIY', 'GCT', 'GI-1', 'GMS-10', 'GRANTA-519', 'H4', 'HARA', 'HCC-15', 'HCC-44', 'HCC-56', 'HCC-78', 'HCC1187', 'HCC1395', 'HCC1569', 'HCC1806', 'HCC1954', 'HCC2935', 'HCC4006', 'HCC70', 'HCC827', 'HCT-15', 'HD-MY-Z', 'HEC-1-A', 'HEC-151', 'HEC-251', 'HEC-265', 'HEC-59', 'HEC-6', 'Hep G2', 'Hey-A8', 'HGC-27', 'HH', 'HLF', 'HOS', 'HPAC', 'HPAF-II', 'Hs 294T', 'Hs 683', 'Hs 695T', 'Hs 729', 'Hs 746T', 'Hs 766T', 'Hs 852.T', 'Hs 936.T', 'Hs 939.T', 'Hs 944.T', 'HSC-2', 'HT-1080', 'HT-1197', 'HT-1376', 'HT-144', 'HT-29', 'HuCCT1', 'HuT 78', 'IA-LM', 'IGR-37', 'IPC-298', 'Ishikawa (Heraklio) 02 ER-', 'IST-MES1', 'IST-MES2', 'J82', 'JHH-2', 'JHH-4', 'JHH-5', 'JHH-6', 'JHH-7', 'JHOS-2', 'JHOS-4', 'JHUEM-2', 'JM1', 'JMSU-1', 'JVM-3', 'K029AX', 'KALS-1', 'KARPAS-620', 'KCI-MOH1', 'KCL-22', 'KE-39', 'KE-97', 'KG-1', 'KHM-1B', 'KLE', 'KMBC-2', 'KMM-1', 'KMRC-1', 'KMRC-2', 'KMS-11', 'KMS-12-BM', 'KMS-26', 'KMS-34', 'KNS-42', 'KNS-60', 'KNS-62', 'KP-2', 'KP-3', 'KU812', 'KURAMOCHI', 'KYM-1', 'KYSE-140', 'KYSE-150', 'KYSE-180', 'KYSE-30', 'KYSE-410', 'KYSE-450', 'KYSE-510', 'KYSE-520', 'KYSE-70', 'L-363', 'L-428', 'L3.3', 'LC-1/sq-SF', 'LCLC-103H', 'LN-18', 'LN-229', 'LOU-NH91', 'LP-1', 'LUDLU-1', 'Malme-3M', 'MCAS', 'MCF7', 'MDA-MB-415', 'MDA-MB-436', 'MDA-MB-453', 'MEC-1', 'MEL-HO', 'MFE-280', 'MFE-296', 'MG-63', 'MHH-ES-1', 'Mino', 'MJ', 'MKN7', 'MKN74', 'MOLP-8', 'MOLT-16', 'MONO-MAC-1', 'MOR/CPR', 'MSTO-211H', 'NCI-H1048', 'NCI-H1155', 'NCI-H1299', 'NCI-H1339', 'NCI-H1341', 'NCI-H1355', 'NCI-H1373', 'NCI-H1563', 'NCI-H1568', 'NCI-H1573', 'NCI-H1581', 'NCI-H1648', 'NCI-H1650', 'NCI-H1651', 'NCI-H1666', 'NCI-H1693', 'NCI-H1694', 'NCI-H1703', 'NCI-H1792', 'NCI-H1793', 'NCI-H1869', 'NCI-H1915', 'NCI-H1944', 'NCI-H1975', 'NCI-H2009', 'NCI-H2023', 'NCI-H2030', 'NCI-H2052', 'NCI-H2087', 'NCI-H211', 'NCI-H2122', 'NCI-H2170', 'NCI-H2172', 'NCI-H2228', 'NCI-H226', 'NCI-H2286', 'NCI-H23', 'NCI-H2444', 'NCI-H2452', 'NCI-H28', 'NCI-H358', 'NCI-H441', 'NCI-H460', 'NCI-H520', 'NCI-H522', 'NCI-H650', 'NCI-H661', 'NCI-H727', 'NCI-H747', 'NCI-H810', 'NCI-N87', 'NCO2', 'NUGC-3', 'NUGC-4', 'OC 316', 'OCI-AML2', 'OCI-AML5', 'OE33', 'ONS-76', 'OPM-2', 'OV-90', 'OVCAR-4', 'OVCAR-8', 'OVMANA', 'OVSAHO', 'OVTOKO', 'P12-ICHIKAWA', 'P3HR-1', 'PA-TU-8902', 'Panc 02.03', 'Panc 04.03', 'PC-14', 'PC-3', 'Pfeiffer', 'PK-1', 'PK-45H', 'PK-59', 'PL45', 'PSN1', 'QGP-1', 'Raji', 'RD', 'RERF-GC-1B', 'RERF-LC-MS', 'RKO', 'RL95-2', 'RPMI-7951', 'RPMI-8402', 'RT-112', 'RT4', 'RVH-421', 'SBC-5', 'SCaBER', 'SCC-9', 'SF126', 'SH-10-TC', 'SHP-77', 'SIG-M5', 'SIMA', 'SJRH30', 'SJSA-1', 'SK-BR-3', 'SK-CO-1', 'SK-ES-1', 'SK-HEP-1', 'SK-LMS-1', 'SK-LU-1', 'SK-MEL-2', 'SK-MEL-24', 'SK-MEL-30', 'SK-MEL-5', 'SK-MES-1', 'SK-N-AS', 'SK-N-DZ', 'SK-N-FI', 'SK-N-SH', 'SK-OV-3', 'SNG-M', 'SNU-182', 'SNU-C2A', 'Sq-1', 'SU-DHL-10', 'SU-DHL-4', 'SU-DHL-6', 'SU-DHL-8', 'SUIT-2', 'SUP-M2', 'SUP-T1', 'SW 1271', 'SW 1353', 'SW1417', 'SW48', 'SW480', 'SW579', 'SW620', 'T84', 'T98G', 'TC-71', 'TCCSUP', 'TE-5', 'TE-9', 'TEN', 'Toledo', 'TOV-112D', 'TOV-21G', 'TT2609-C02', 'TYK-nu', 'U-937', 'UACC-62', 'UACC-812', 'UM-UC-3', 'VMRC-RCZ', 'WM-115', 'WM-266-4', 'WM-793', 'WM-88', 'WM-983B', 'WM1799', 'ZR-75-30'],
                              inplace=True)

  return df_IC50_Table

def get_RNA_data():
  df_rna = loadData(rna_path) # RNA expression
  df_rna.sort_values('Unnamed: 0')
  df_rna.rename(columns={"Unnamed: 0": "Cell_Lines"},inplace=True)
  return df_rna

def get_SNV_data():
  df_snv = loadData(snv_path) # single nucleotide mutation
  df_snv.sort_values('Unnamed: 0')
  df_snv.rename(columns={"Unnamed: 0": "Cell_Lines"},inplace=True)
  return df_snv

def get_CNV_data():
  df_cnv = loadData(cnv_path) # copy number variation
  df_cnv.sort_values('Unnamed: 0')
  df_cnv.rename(columns={"Unnamed: 0": "Cell_Lines"},inplace=True)
  return df_cnv

def get_drug_data():
  df_drug = loadData(drug_path)
  return df_drug

def get_drug_representation(smile):
  molecule = Chem.MolFromSmiles(smile)
  featurizer=dc.feat.ConvMolFeaturizer()
  features_array = featurizer.featurize(molecule)

  num_of_atoms= features_array[0].get_num_atoms()
  features = []
  for feature in features_array[0].get_atom_features():
      features.append(feature)

  edge_attributes = []
  for bond in molecule.GetBonds():
      edge_attrs = []
      # Feature 1: Bond type (as double)
      edge_attrs.append(bond.GetBondTypeAsDouble())
      # Feature 2: Rings
      edge_attrs.append(bond.IsInRing())
      # Append node features to matrix (twice, per direction)
      edge_attributes += [edge_attrs, edge_attrs]

  edge_attributes = np.asarray(edge_attributes)

  #GraphDRP
  g_edges = []
  for bond in molecule.GetBonds():
          g_edges.append([bond.GetBeginAtomIdx(), bond.GetEndAtomIdx()])
  graph = nx.Graph(g_edges).to_directed()
  edge_index = []
  for e1, e2 in graph.edges:
          edge_index.append([e1, e2])


  return num_of_atoms,features,edge_attributes,edge_index;


# get all omics data without feature selection
def get_multi_omics_base():
  # orginal data
  df_rna = get_RNA_data()
  df_snv = get_SNV_data()
  df_cnv = get_CNV_data()


  df_omics_supervised = pd.merge(df_rna,df_cnv, on='Cell_Lines')
  df_omics_supervised = pd.merge(df_omics_supervised,df_snv, on='Cell_Lines')
  df_omics = df_omics_supervised.copy()

  df_omics['Cell_Lines'].replace([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362],['42-MG-BA', '5637', '639-V', '697', '769-P', '8-MG-BA', '8505C', 'A172', 'A2058', 'A2780', 'A549', 'ACHN', 'AMO-1', 'AsPC-1', 'AU565', 'BFTC-909', 'BL-41', 'BL-70', 'BT-20', 'BT-474', 'BT-549', 'BxPC-3', 'C2BBe1', 'C32', 'C3A', 'Caki-2', 'CAL-12T', 'CAL-85-1', 'Calu-1', 'Calu-3', 'Calu-6', 'CAMA-1', 'Capan-2', 'CAS-1', 'CCK-81', 'CHL-1', 'CHP-212', 'CMK-86', 'COLO-678', 'COLO-679', 'COR-L23', 'COV318', 'COV504', 'Daoy', 'DBTRG-05MG', 'DEL', 'DK-MG', 'DOHH-2', 'DV-90', 'EB2', 'EBC-1', 'EFE-184', 'EFM-19', 'EFO-21', 'EFO-27', 'EM-2', 'EN', 'ES-2', 'ESS-1', 'F-36P', 'FU-OV-1', 'FU97', 'G-361', 'G-401', 'G-402', 'GAMG', 'GCIY', 'GCT', 'GI-1', 'GMS-10', 'GRANTA-519', 'H4', 'HARA', 'HCC-15', 'HCC-44', 'HCC-56', 'HCC-78', 'HCC1187', 'HCC1395', 'HCC1569', 'HCC1806', 'HCC1954', 'HCC2935', 'HCC4006', 'HCC70', 'HCC827', 'HCT-15', 'HD-MY-Z', 'HEC-1-A', 'HEC-151', 'HEC-251', 'HEC-265', 'HEC-59', 'HEC-6', 'Hep G2', 'Hey-A8', 'HGC-27', 'HH', 'HLF', 'HOS', 'HPAC', 'HPAF-II', 'Hs 294T', 'Hs 683', 'Hs 695T', 'Hs 729', 'Hs 746T', 'Hs 766T', 'Hs 852.T', 'Hs 936.T', 'Hs 939.T', 'Hs 944.T', 'HSC-2', 'HT-1080', 'HT-1197', 'HT-1376', 'HT-144', 'HT-29', 'HuCCT1', 'HuT 78', 'IA-LM', 'IGR-37', 'IPC-298', 'Ishikawa (Heraklio) 02 ER-', 'IST-MES1', 'IST-MES2', 'J82', 'JHH-2', 'JHH-4', 'JHH-5', 'JHH-6', 'JHH-7', 'JHOS-2', 'JHOS-4', 'JHUEM-2', 'JM1', 'JMSU-1', 'JVM-3', 'K029AX', 'KALS-1', 'KARPAS-620', 'KCI-MOH1', 'KCL-22', 'KE-39', 'KE-97', 'KG-1', 'KHM-1B', 'KLE', 'KMBC-2', 'KMM-1', 'KMRC-1', 'KMRC-2', 'KMS-11', 'KMS-12-BM', 'KMS-26', 'KMS-34', 'KNS-42', 'KNS-60', 'KNS-62', 'KP-2', 'KP-3', 'KU812', 'KURAMOCHI', 'KYM-1', 'KYSE-140', 'KYSE-150', 'KYSE-180', 'KYSE-30', 'KYSE-410', 'KYSE-450', 'KYSE-510', 'KYSE-520', 'KYSE-70', 'L-363', 'L-428', 'L3.3', 'LC-1/sq-SF', 'LCLC-103H', 'LN-18', 'LN-229', 'LOU-NH91', 'LP-1', 'LUDLU-1', 'Malme-3M', 'MCAS', 'MCF7', 'MDA-MB-415', 'MDA-MB-436', 'MDA-MB-453', 'MEC-1', 'MEL-HO', 'MFE-280', 'MFE-296', 'MG-63', 'MHH-ES-1', 'Mino', 'MJ', 'MKN7', 'MKN74', 'MOLP-8', 'MOLT-16', 'MONO-MAC-1', 'MOR/CPR', 'MSTO-211H', 'NCI-H1048', 'NCI-H1155', 'NCI-H1299', 'NCI-H1339', 'NCI-H1341', 'NCI-H1355', 'NCI-H1373', 'NCI-H1563', 'NCI-H1568', 'NCI-H1573', 'NCI-H1581', 'NCI-H1648', 'NCI-H1650', 'NCI-H1651', 'NCI-H1666', 'NCI-H1693', 'NCI-H1694', 'NCI-H1703', 'NCI-H1792', 'NCI-H1793', 'NCI-H1869', 'NCI-H1915', 'NCI-H1944', 'NCI-H1975', 'NCI-H2009', 'NCI-H2023', 'NCI-H2030', 'NCI-H2052', 'NCI-H2087', 'NCI-H211', 'NCI-H2122', 'NCI-H2170', 'NCI-H2172', 'NCI-H2228', 'NCI-H226', 'NCI-H2286', 'NCI-H23', 'NCI-H2444', 'NCI-H2452', 'NCI-H28', 'NCI-H358', 'NCI-H441', 'NCI-H460', 'NCI-H520', 'NCI-H522', 'NCI-H650', 'NCI-H661', 'NCI-H727', 'NCI-H747', 'NCI-H810', 'NCI-N87', 'NCO2', 'NUGC-3', 'NUGC-4', 'OC 316', 'OCI-AML2', 'OCI-AML5', 'OE33', 'ONS-76', 'OPM-2', 'OV-90', 'OVCAR-4', 'OVCAR-8', 'OVMANA', 'OVSAHO', 'OVTOKO', 'P12-ICHIKAWA', 'P3HR-1', 'PA-TU-8902', 'Panc 02.03', 'Panc 04.03', 'PC-14', 'PC-3', 'Pfeiffer', 'PK-1', 'PK-45H', 'PK-59', 'PL45', 'PSN1', 'QGP-1', 'Raji', 'RD', 'RERF-GC-1B', 'RERF-LC-MS', 'RKO', 'RL95-2', 'RPMI-7951', 'RPMI-8402', 'RT-112', 'RT4', 'RVH-421', 'SBC-5', 'SCaBER', 'SCC-9', 'SF126', 'SH-10-TC', 'SHP-77', 'SIG-M5', 'SIMA', 'SJRH30', 'SJSA-1', 'SK-BR-3', 'SK-CO-1', 'SK-ES-1', 'SK-HEP-1', 'SK-LMS-1', 'SK-LU-1', 'SK-MEL-2', 'SK-MEL-24', 'SK-MEL-30', 'SK-MEL-5', 'SK-MES-1', 'SK-N-AS', 'SK-N-DZ', 'SK-N-FI', 'SK-N-SH', 'SK-OV-3', 'SNG-M', 'SNU-182', 'SNU-C2A', 'Sq-1', 'SU-DHL-10', 'SU-DHL-4', 'SU-DHL-6', 'SU-DHL-8', 'SUIT-2', 'SUP-M2', 'SUP-T1', 'SW 1271', 'SW 1353', 'SW1417', 'SW48', 'SW480', 'SW579', 'SW620', 'T84', 'T98G', 'TC-71', 'TCCSUP', 'TE-5', 'TE-9', 'TEN', 'Toledo', 'TOV-112D', 'TOV-21G', 'TT2609-C02', 'TYK-nu', 'U-937', 'UACC-62', 'UACC-812', 'UM-UC-3', 'VMRC-RCZ', 'WM-115', 'WM-266-4', 'WM-793', 'WM-88', 'WM-983B', 'WM1799', 'ZR-75-30'],
                              inplace=True)
  return df_rna, df_snv,df_cnv, df_omics

def get_multi_omics(n=1):
  # n is % of Bayesian Ridge coef features

  rna_selected_features = loadData('/content/datasets/BayesianRidge/Ic50_Exp.csv') # RNA expression
  snv_selected_features = loadData('/content/datasets/BayesianRidge/Ic50_SNV.csv') # single nucleotide mutation
  cnv_selected_features = loadData('/content/datasets/BayesianRidge/Ic50_CNV.csv') # copy number variation

  # orginal data
  df_rna = get_RNA_data()
  df_snv = get_SNV_data()
  df_cnv = get_CNV_data()
  rna_top_selected_features= rna_selected_features.iloc[:(int(rna_selected_features.shape[0] * n)),:]['features'].tolist()
  rna_topfeatures = df_rna[rna_top_selected_features]

  snv_top_selected_features= snv_selected_features.iloc[:(int(snv_selected_features.shape[0] * n)),:]['features'].tolist()
  snv_topfeatures = df_snv[snv_top_selected_features]

  cnv_top_selected_features= cnv_selected_features.iloc[:(int(cnv_selected_features.shape[0] * n)),:]['features'].tolist()
  cnv_topfeatures = df_cnv[cnv_top_selected_features]



  rna_BRR =  resetIndex(rna_topfeatures,'Cell_Lines')
  snv_BRR =  resetIndex(snv_topfeatures,'Cell_Lines')
  cnv_BRR =  resetIndex(cnv_topfeatures,'Cell_Lines')


  df_omics_BRR = pd.merge(rna_BRR,cnv_BRR, on='Cell_Lines')
  df_omics_BRR = pd.merge(df_omics_BRR,snv_BRR, on='Cell_Lines')
  df_omics = df_omics_BRR.copy()

  df_omics['Cell_Lines'].replace([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362],['42-MG-BA', '5637', '639-V', '697', '769-P', '8-MG-BA', '8505C', 'A172', 'A2058', 'A2780', 'A549', 'ACHN', 'AMO-1', 'AsPC-1', 'AU565', 'BFTC-909', 'BL-41', 'BL-70', 'BT-20', 'BT-474', 'BT-549', 'BxPC-3', 'C2BBe1', 'C32', 'C3A', 'Caki-2', 'CAL-12T', 'CAL-85-1', 'Calu-1', 'Calu-3', 'Calu-6', 'CAMA-1', 'Capan-2', 'CAS-1', 'CCK-81', 'CHL-1', 'CHP-212', 'CMK-86', 'COLO-678', 'COLO-679', 'COR-L23', 'COV318', 'COV504', 'Daoy', 'DBTRG-05MG', 'DEL', 'DK-MG', 'DOHH-2', 'DV-90', 'EB2', 'EBC-1', 'EFE-184', 'EFM-19', 'EFO-21', 'EFO-27', 'EM-2', 'EN', 'ES-2', 'ESS-1', 'F-36P', 'FU-OV-1', 'FU97', 'G-361', 'G-401', 'G-402', 'GAMG', 'GCIY', 'GCT', 'GI-1', 'GMS-10', 'GRANTA-519', 'H4', 'HARA', 'HCC-15', 'HCC-44', 'HCC-56', 'HCC-78', 'HCC1187', 'HCC1395', 'HCC1569', 'HCC1806', 'HCC1954', 'HCC2935', 'HCC4006', 'HCC70', 'HCC827', 'HCT-15', 'HD-MY-Z', 'HEC-1-A', 'HEC-151', 'HEC-251', 'HEC-265', 'HEC-59', 'HEC-6', 'Hep G2', 'Hey-A8', 'HGC-27', 'HH', 'HLF', 'HOS', 'HPAC', 'HPAF-II', 'Hs 294T', 'Hs 683', 'Hs 695T', 'Hs 729', 'Hs 746T', 'Hs 766T', 'Hs 852.T', 'Hs 936.T', 'Hs 939.T', 'Hs 944.T', 'HSC-2', 'HT-1080', 'HT-1197', 'HT-1376', 'HT-144', 'HT-29', 'HuCCT1', 'HuT 78', 'IA-LM', 'IGR-37', 'IPC-298', 'Ishikawa (Heraklio) 02 ER-', 'IST-MES1', 'IST-MES2', 'J82', 'JHH-2', 'JHH-4', 'JHH-5', 'JHH-6', 'JHH-7', 'JHOS-2', 'JHOS-4', 'JHUEM-2', 'JM1', 'JMSU-1', 'JVM-3', 'K029AX', 'KALS-1', 'KARPAS-620', 'KCI-MOH1', 'KCL-22', 'KE-39', 'KE-97', 'KG-1', 'KHM-1B', 'KLE', 'KMBC-2', 'KMM-1', 'KMRC-1', 'KMRC-2', 'KMS-11', 'KMS-12-BM', 'KMS-26', 'KMS-34', 'KNS-42', 'KNS-60', 'KNS-62', 'KP-2', 'KP-3', 'KU812', 'KURAMOCHI', 'KYM-1', 'KYSE-140', 'KYSE-150', 'KYSE-180', 'KYSE-30', 'KYSE-410', 'KYSE-450', 'KYSE-510', 'KYSE-520', 'KYSE-70', 'L-363', 'L-428', 'L3.3', 'LC-1/sq-SF', 'LCLC-103H', 'LN-18', 'LN-229', 'LOU-NH91', 'LP-1', 'LUDLU-1', 'Malme-3M', 'MCAS', 'MCF7', 'MDA-MB-415', 'MDA-MB-436', 'MDA-MB-453', 'MEC-1', 'MEL-HO', 'MFE-280', 'MFE-296', 'MG-63', 'MHH-ES-1', 'Mino', 'MJ', 'MKN7', 'MKN74', 'MOLP-8', 'MOLT-16', 'MONO-MAC-1', 'MOR/CPR', 'MSTO-211H', 'NCI-H1048', 'NCI-H1155', 'NCI-H1299', 'NCI-H1339', 'NCI-H1341', 'NCI-H1355', 'NCI-H1373', 'NCI-H1563', 'NCI-H1568', 'NCI-H1573', 'NCI-H1581', 'NCI-H1648', 'NCI-H1650', 'NCI-H1651', 'NCI-H1666', 'NCI-H1693', 'NCI-H1694', 'NCI-H1703', 'NCI-H1792', 'NCI-H1793', 'NCI-H1869', 'NCI-H1915', 'NCI-H1944', 'NCI-H1975', 'NCI-H2009', 'NCI-H2023', 'NCI-H2030', 'NCI-H2052', 'NCI-H2087', 'NCI-H211', 'NCI-H2122', 'NCI-H2170', 'NCI-H2172', 'NCI-H2228', 'NCI-H226', 'NCI-H2286', 'NCI-H23', 'NCI-H2444', 'NCI-H2452', 'NCI-H28', 'NCI-H358', 'NCI-H441', 'NCI-H460', 'NCI-H520', 'NCI-H522', 'NCI-H650', 'NCI-H661', 'NCI-H727', 'NCI-H747', 'NCI-H810', 'NCI-N87', 'NCO2', 'NUGC-3', 'NUGC-4', 'OC 316', 'OCI-AML2', 'OCI-AML5', 'OE33', 'ONS-76', 'OPM-2', 'OV-90', 'OVCAR-4', 'OVCAR-8', 'OVMANA', 'OVSAHO', 'OVTOKO', 'P12-ICHIKAWA', 'P3HR-1', 'PA-TU-8902', 'Panc 02.03', 'Panc 04.03', 'PC-14', 'PC-3', 'Pfeiffer', 'PK-1', 'PK-45H', 'PK-59', 'PL45', 'PSN1', 'QGP-1', 'Raji', 'RD', 'RERF-GC-1B', 'RERF-LC-MS', 'RKO', 'RL95-2', 'RPMI-7951', 'RPMI-8402', 'RT-112', 'RT4', 'RVH-421', 'SBC-5', 'SCaBER', 'SCC-9', 'SF126', 'SH-10-TC', 'SHP-77', 'SIG-M5', 'SIMA', 'SJRH30', 'SJSA-1', 'SK-BR-3', 'SK-CO-1', 'SK-ES-1', 'SK-HEP-1', 'SK-LMS-1', 'SK-LU-1', 'SK-MEL-2', 'SK-MEL-24', 'SK-MEL-30', 'SK-MEL-5', 'SK-MES-1', 'SK-N-AS', 'SK-N-DZ', 'SK-N-FI', 'SK-N-SH', 'SK-OV-3', 'SNG-M', 'SNU-182', 'SNU-C2A', 'Sq-1', 'SU-DHL-10', 'SU-DHL-4', 'SU-DHL-6', 'SU-DHL-8', 'SUIT-2', 'SUP-M2', 'SUP-T1', 'SW 1271', 'SW 1353', 'SW1417', 'SW48', 'SW480', 'SW579', 'SW620', 'T84', 'T98G', 'TC-71', 'TCCSUP', 'TE-5', 'TE-9', 'TEN', 'Toledo', 'TOV-112D', 'TOV-21G', 'TT2609-C02', 'TYK-nu', 'U-937', 'UACC-62', 'UACC-812', 'UM-UC-3', 'VMRC-RCZ', 'WM-115', 'WM-266-4', 'WM-793', 'WM-88', 'WM-983B', 'WM1799', 'ZR-75-30'],
                              inplace=True)
  return df_rna, df_snv,df_cnv, df_omics,rna_BRR,snv_BRR,cnv_BRR

def get_train_test_date(df_ic50,df_omics,df_drugs):
  df_ic50 = df_ic50.sample(frac=1, random_state=42).reset_index(drop=True)
  x_ic50_omics = pd.merge(df_ic50,df_omics, on='Cell_Lines')
  x_ic50_drug_omics = pd.merge(x_ic50_omics,df_drugs, on='Drug_Name')


  y_label = x_ic50_drug_omics['Response']
  y_label = y_label.values.reshape(-1,1)
  y_label= scale_data(y_label)
  y_label = y_label.values.reshape(-1)


  x = x_ic50_drug_omics.drop(['Cell_Lines','Drug_Name','Response','PubChemID'],axis=1)



  x_omics_train, x_omics_test, y_train, y_test = train_test_split(x, y_label, test_size=0.1, random_state=42)
  x_omics_train, x_omics_val, y_train, y_val = train_test_split(x_omics_train, y_train, test_size=0.1, random_state=42)

  x_drug_train = x_omics_train['SMILES']
  x_drug_val = x_omics_val['SMILES']
  x_drug_test = x_omics_test['SMILES']

  del x_omics_train['SMILES']
  del x_omics_val['SMILES']
  del x_omics_test['SMILES']

  x_drug_train= x_drug_train.to_numpy()
  x_drug_val= x_drug_val.to_numpy()
  x_drug_test= x_drug_test.to_numpy()

  x_omics_train =x_omics_train.to_numpy()
  x_omics_val =x_omics_val.to_numpy()
  x_omics_test =x_omics_test.to_numpy()

   # scaling
  x_omics_train= scale_data(x_omics_train)
  x_omics_val= scale_data(x_omics_val)
  x_omics_test= scale_data(x_omics_test)

  # y_train= y_train.to_numpy()
  # y_val= y_val.to_numpy()
  # y_test= y_test.to_numpy()



  x_drug_train = x_drug_train.astype('U')
  x_drug_val = x_drug_val.astype('U')
  x_drug_test = x_drug_test.astype('U')

  x_omics_train = x_omics_train.astype(np.float64)
  x_omics_val = x_omics_val.astype(np.float64)
  x_omics_test = x_omics_test.astype(np.float64)

  y_train = y_train.astype(np.float64)
  y_val = y_val.astype(np.float64)
  y_test = y_test.astype(np.float64)

  x_omics_train= x_omics_train.to_numpy()
  x_omics_val= x_omics_val.to_numpy()
  x_omics_test= x_omics_test.to_numpy()

  return y_label, x_drug_train,x_drug_val,x_drug_test,x_omics_train,x_omics_val,x_omics_test,y_train,y_val,y_test