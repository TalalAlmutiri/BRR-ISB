# -*- coding: utf-8 -*-
"""GNN_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VysHrpDL2FCxcm0E-rkUhVRHuw4XLhn6
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.nn import Sequential, Linear, BatchNorm1d, ReLU
from torch_geometric.nn import GCNConv,TransformerConv, GATConv, TopKPooling, BatchNorm
from torch_geometric.nn import global_mean_pool as gap, global_max_pool as gmp
from torch_geometric.nn.conv.x_conv import XConv
torch.manual_seed(12345)


class GNN_Model(torch.nn.Module):
    def __init__(self, feature_size=75):
        super(GNN_Model, self).__init__()
        embedding_size = 512
        #https://github.com/deepfindr/gnn-project
        # GNN layers
        self.conv1_drug = GCNConv(feature_size, embedding_size)
        self.pool1_drug = TopKPooling(embedding_size, ratio=0.8)
        self.conv2_drug = GCNConv(embedding_size, embedding_size)
        self.pool2_drug = TopKPooling(embedding_size, ratio=0.5)


        # cell line feature
        self.conv1d_omcis_1 = nn.Conv1d(1,40,8)
        self.maxPool1D_1 = nn.MaxPool1d(3)
        self.conv1d_omcis_2 = nn.Conv1d(40,80,8)
        self.maxPool1D_2 = nn.MaxPool1d(3)
        self.dense_1 = nn.Linear(80, 512)
        self.act1 = nn.ReLU()
        self.dropout1 = nn.Dropout(0.3)
        self.dense_2 = nn.Linear(512, 128)
        self.act2 = nn.ReLU()
        self.dropout2 = nn.Dropout(0.3)
        self.fc_omcis = nn.LazyLinear(128)


        # fully connected layers
        self.linear1 = nn.LazyLinear(512)
        self.linear2 = nn.LazyLinear(128)
        self.output = nn.Linear(128, 1)

    def forward(self,data):
        x_drug_features, edge_attr, edge_index, batch = data.x, data.edge_attr, data.edge_index, data.batch
        omics = data.omics
        omics = omics[:,None,:]

        x_drug_features = self.conv1_drug(x_drug_features, edge_index).relu()
        x_drug_features, edge_index, edge_attr, batch, _, _= self.pool1_drug(x_drug_features,edge_index,None,batch)
        x_drug_features_1 = torch.cat([gmp(x_drug_features, batch), gap(x_drug_features, batch)], dim=1)


        x_drug_features = self.conv2_drug(x_drug_features, edge_index).relu()
        x_drug_features, edge_index, edge_attr, batch, _, _= self.pool2_drug(x_drug_features,edge_index,None,batch)
        x_drug_features_2 = torch.cat([gmp(x_drug_features, batch), gap(x_drug_features, batch)], dim=1)

        # Concat vectors
        x_drug_features = x_drug_features_1 + x_drug_features_2

         # 1d conv layers
        conv_omics = self.conv1d_omcis_1(omics).relu()
        conv_omics = self.maxPool1D_1(conv_omics)
        conv_omics = self.conv1d_omcis_2(conv_omics).relu()
        conv_omics = self.maxPool1D_2(conv_omics)


        # flatten
        x_omcis = conv_omics.view(-1, conv_omics.shape[1] * conv_omics.shape[2])
        x_omcis = self.fc_omcis(x_omcis)

        # Concat drug features with omics features
        x = torch.cat((x_drug_features, x_omcis), 1)


        # final dense and output layers
        x = self.linear1(x).relu()
        x = F.dropout(x, p=0.3, training=self.training)
        x = self.linear2(x)
        output = self.output(x)
        output = nn.Sigmoid()(output)
        return output, x