# -*- coding: utf-8 -*-
"""Model_Evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D63iBBe0t5gEMK-F3HZPZ0lGKwpNPjHN
"""

import os
import numpy as np
import math
import torchmetrics.functional as torch_metrics
import csv
import torch
from sklearn.model_selection import KFold
from torch_geometric.data import InMemoryDataset, download_url,Dataset, Data, DataLoader

def mse(predictions,targets):
  return torch.mean((predictions - targets).pow(2))

def rmse(predictions,targets):
  return torch.sqrt(torch.mean((predictions - targets).pow(2)))

def pearsonr(predictions, targets):
   return (torch_metrics.pearson_corrcoef(predictions, targets))

def r2_score(predictions, targets):
   return torch_metrics.r2_score(predictions, targets)

# def mse1(predictions,targets):
#   return torch_metrics.mean_squared_error(predictions, targets, squared=True)
# def rmse1(predictions,targets):
#   return torch_metrics.mean_squared_error(predictions, targets, squared=False)

def print_results(title,epoch,loss,predictions,targets):

  loss_value = "{:.3f}".format(loss)
  mse_value= "{:.3f}".format(mse(predictions,targets))
  rmse_value= "{:.3f}".format(rmse(predictions,targets))
  pearsonr_value= "{:.3f}".format(pearsonr(predictions,targets))

  print('----------------------')
  print('epoch= ' + str(epoch))
  print(title + " Total Loss: " + loss_value)
  print(title + " MSE: " + mse_value)
  print(title + " RMSE: " + rmse_value)
  print(title + " Pearsons correlation: " + pearsonr_value)
  #print(title + " R2: {:.3f}".format(r2_score(predictions,targets)))

  # save result as csv file
  result_path = "result.csv"
  with open(result_path,'a') as f:
    writer = csv.writer(f)
    writer.writerow([title +'-'+ str(epoch),mse_value,rmse_value,pearsonr_value])

  return loss_value,mse_value,rmse_value,pearsonr_value


def printResultsCV(model,dataset,device,title, k, verbose=0):
  kfold = KFold(n_splits=k, shuffle=True)
  loss_scores = []
  mse_scores = []
  rmse_scores = []
  corr_scores = []

  for fold, (training_index, _) in enumerate(kfold.split(dataset)):

    if verbose == 1:
      print(f'Fold:' + str(fold))
      print('----------------------')

    subSetSampler = torch.utils.data.SubsetRandomSampler(training_index)

    loader= DataLoader(dataset, batch_size=32, sampler=subSetSampler)
    loss, preds, targets = test(model, loader,device)

    mse_value= mse(preds,targets)
    rmse_value= rmse(preds,targets)
    pearsonr_value= pearsonr(preds,targets)

    if verbose == 1:
     print(title + " MSE: {:.3f}".format(mse_value))
     print(title + " RMSE: {:.3f}".format(rmse_value))
     print(title + " Pearsons correlation: {:.3f}".format(pearsonr_value))

    # append to list
    loss_scores.append(float("{:.3f}".format(loss/len(loader))))
    mse_scores.append(float("{:.3f}".format(mse_value)))
    rmse_scores.append(float("{:.3f}".format(rmse_value)))
    corr_scores.append(float("{:.3f}".format(pearsonr_value)))


  # Print mean
  final_loss = "{:.3f}".format(np.mean(loss_scores))
  final_mse = "{:.3f}".format(np.mean(mse_scores))
  final_rmse = "{:.3f}".format(np.mean(rmse_scores))
  final_corr = "{:.3f}".format(np.mean(corr_scores))
  print(f'----------------------')
  print(f'Final Results' + title)
  print(title + " MSE: " + final_mse)
  print(title + " RMSE: " + final_rmse)
  print(title + " PCC: " + final_corr)

  return final_loss,final_mse,final_rmse,final_corr

#https://github.com/hauldhut/GraphDRP/blob/master/utils.py
import matplotlib.pyplot as plt
def draw_polt(train_loss, val_loss,train_lablel,val_lebel):
  plt.figure()
  plt.plot(train_loss, label=train_lablel)
  plt.plot(val_loss,label=val_lebel)
  plt.legend()
  plt.show


def draw_one_chart(val_corr, title,label):
  plt.figure()
  plt.plot(val_corr, label=label)
  plt.title(title)
  plt.xlabel('Epoch')
  plt.ylabel('PCC')
  plt.legend()
  plt.show